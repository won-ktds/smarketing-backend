def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'gradle', image: 'gradle:jdk17', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:20.10.16-dind', ttyEnabled: true, privileged: true),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'envsubst', image: "hiondal/envsubst", command: 'sleep', args: '1h')
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/var/run', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def manifest = "deploy.yaml"
        def namespace
        def services = ['member', 'store', 'marketing-content', 'ai-recommend']

        stage("Get Source") {
            checkout scm
            
            // smarketing-java 하위에 있는 설정 파일 읽기
            props = readProperties file: "smarketing-java/deployment/deploy_env_vars"
            namespace = "${props.namespace}"

            echo "=== Build Information ==="
            echo "Services: ${services}"
            echo "Namespace: ${namespace}"
            echo "Image Tag: ${imageTag}"
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        echo "=== Azure 로그인 ==="
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az account set --subscription 2513dd36-7978-48e3-9a7c-b221d4874f66
                        
                        echo "=== AKS 인증정보 가져오기 ==="
                        az aks get-credentials --resource-group rg-digitalgarage-01 --name aks-digitalgarage-01 --overwrite-existing
                        
                        echo "=== 네임스페이스 생성 ==="
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                        
                        echo "=== Image Pull Secret 생성 ==="
                        kubectl create secret docker-registry acr-secret \\
                            --docker-server=${props.registry} \\
                            --docker-username=acrdigitalgarage02 \\
                            --docker-password=\$(az acr credential show --name acrdigitalgarage02 --query passwords[0].value -o tsv) \\
                            --namespace=${namespace} \\
                            --dry-run=client -o yaml | kubectl apply -f -
                            
                        echo "=== 클러스터 상태 확인 ==="
                        kubectl get nodes
                        kubectl get ns ${namespace}
                    """
                }
            }
        }

        stage('Build Applications') {
            container('gradle') {
                sh """
                    echo "=== smarketing-java 디렉토리로 이동 ==="
                    cd smarketing-java
                    
                    echo "=== gradlew 권한 설정 ==="
                    chmod +x gradlew
                    
                    echo "=== 전체 서비스 빌드 ==="
                    ./gradlew :member:clean :member:build -x test
                    ./gradlew :store:clean :store:build -x test
                    ./gradlew :marketing-content:clean :marketing-content:build -x test
                    ./gradlew :ai-recommend:clean :ai-recommend:build -x test
                    
                    echo "=== 빌드 결과 확인 ==="
                    find . -name "*.jar" -path "*/build/libs/*" | grep -v 'plain.jar'
                """
            }
        }

        stage('ACR Login') {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        echo "=== Azure 로그인 ==="
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az account set --subscription 2513dd36-7978-48e3-9a7c-b221d4874f66
                        
                        echo "=== ACR 인증 토큰 생성 ==="
                        ACR_TOKEN=\$(az acr login --name acrdigitalgarage02 --expose-token --output tsv --query accessToken)
                        echo "ACR_TOKEN=\$ACR_TOKEN" > /tmp/acr_token.env
                        
                        echo "=== ACR 인증 정보 저장 ==="
                        echo "acrdigitalgarage02.azurecr.io" > /tmp/acr_server.txt
                        echo "00000000-0000-0000-0000-000000000000" > /tmp/acr_username.txt
                        echo "\$ACR_TOKEN" > /tmp/acr_password.txt
                    """
                }
            }
        }

        stage('Build & Push Images') {
            container('docker') {
                sh """
                    echo "=== Docker 데몬 시작 대기 ==="
                    timeout 30 sh -c 'until docker info; do sleep 1; done'
                    
                    echo "=== ACR 로그인 정보 읽기 ==="
                    ACR_SERVER=\$(cat /tmp/acr_server.txt)
                    ACR_USERNAME=\$(cat /tmp/acr_username.txt)
                    ACR_PASSWORD=\$(cat /tmp/acr_password.txt)
                    
                    echo "=== Docker로 ACR 로그인 ==="
                    echo "\$ACR_PASSWORD" | docker login \$ACR_SERVER --username \$ACR_USERNAME --password-stdin
                """

                services.each { service ->
                    script {
                        def buildDir = "smarketing-java/${service}"
                        def fullImageName = "${props.registry}/${props.image_org}/${service}:${imageTag}"

                        echo "Building image for ${service}: ${fullImageName}"
                        
                        // 실제 JAR 파일명 동적 탐지
                        def actualJarFile = sh(
                            script: """
                                cd ${buildDir}/build/libs
                                ls *.jar | grep -v 'plain.jar' | head -1
                            """,
                            returnStdout: true
                        ).trim()
                        
                        if (!actualJarFile) {
                            error "${service} JAR 파일을 찾을 수 없습니다"
                        }
                        
                        echo "발견된 JAR 파일: ${actualJarFile}"

                        sh """
                            echo "=== ${service} 이미지 빌드 ==="
                            docker build \\
                                --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \\
                                --build-arg ARTIFACTORY_FILE="${actualJarFile}" \\
                                -f smarketing-java/deployment/container/Dockerfile \\
                                -t ${fullImageName} .

                            echo "=== ${service} 이미지 푸시 ==="
                            docker push ${fullImageName}
                            
                            echo "Successfully built and pushed: ${fullImageName}"
                        """
                    }
                }
            }
        }

        stage('Generate & Apply Manifest') {
            container('envsubst') {
                sh """
                    echo "=== 환경변수 설정 ==="
                    export namespace=${namespace}
                    export allowed_origins=${props.allowed_origins}
                    export jwt_secret_key=${props.jwt_secret_key}
                    export postgres_user=${props.postgres_user}
                    export postgres_password=${props.postgres_password}
                    export replicas=${props.replicas}
                    # 리소스 요구사항 조정 (작게)
                    export resources_requests_cpu=100m
                    export resources_requests_memory=128Mi
                    export resources_limits_cpu=500m
                    export resources_limits_memory=512Mi

                    # 이미지 경로 환경변수 설정
                    export member_image_path=${props.registry}/${props.image_org}/member:${imageTag}
                    export store_image_path=${props.registry}/${props.image_org}/store:${imageTag}
                    export marketing_content_image_path=${props.registry}/${props.image_org}/marketing-content:${imageTag}
                    export ai_recommend_image_path=${props.registry}/${props.image_org}/ai-recommend:${imageTag}

                    echo "=== Manifest 생성 ==="
                    envsubst < smarketing-java/deployment/${manifest}.template > smarketing-java/deployment/${manifest}
                    
                    echo "=== Generated Manifest File ==="
                    cat smarketing-java/deployment/${manifest}
                    echo "==============================="
                """
            }

            container('azure-cli') {
                sh """
                    echo "=== PostgreSQL 서비스 확인 ==="
                    kubectl get svc -n ${namespace} | grep postgresql || echo "PostgreSQL 서비스가 없습니다. 먼저 설치해주세요."
                    
                    echo "=== Manifest 적용 ==="
                    kubectl apply -f smarketing-java/deployment/${manifest}

                    echo "=== 배포 상태 확인 (60초 대기) ==="
                    kubectl -n ${namespace} get deployments
                    kubectl -n ${namespace} get pods
                    
                    echo "=== 각 서비스 배포 대기 (60초 timeout) ==="
                    timeout 60 kubectl -n ${namespace} wait --for=condition=available deployment/member --timeout=60s || echo "member deployment 대기 타임아웃"
                    timeout 60 kubectl -n ${namespace} wait --for=condition=available deployment/store --timeout=60s || echo "store deployment 대기 타임아웃"
                    timeout 60 kubectl -n ${namespace} wait --for=condition=available deployment/marketing-content --timeout=60s || echo "marketing-content deployment 대기 타임아웃"
                    timeout 60 kubectl -n ${namespace} wait --for=condition=available deployment/ai-recommend --timeout=60s || echo "ai-recommend deployment 대기 타임아웃"
                    
                    echo "=== 최종 상태 ==="
                    kubectl -n ${namespace} get all
                    
                    echo "=== 실패한 Pod 상세 정보 ==="
                    for pod in \$(kubectl -n ${namespace} get pods --field-selector=status.phase!=Running -o name 2>/dev/null || true); do
                        if [ ! -z "\$pod" ]; then
                            echo "=== 실패한 Pod: \$pod ==="
                            kubectl -n ${namespace} describe \$pod | tail -20
                        fi
                    done
                """
            }
        }
    }
}
