// smarketing-backend/smarketing-ai/deployment/Jenkinsfile

def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'git', image: 'alpine/git:latest', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        
        // Manifest Repository 설정
        def MANIFEST_REPO = 'https://github.com/won-ktds/smarketing-manifest.git'
        def MANIFEST_CREDENTIAL_ID = 'github-credentials-smarketing'

        try {
            stage("Get Source") {
                checkout scm
                
                // smarketing-ai 하위에 있는 설정 파일 읽기
                props = readProperties file: "smarketing-ai/deployment/deploy_env_vars"

                echo "=== Build Information ==="
                echo "Service: smarketing-ai"
                echo "Image Tag: ${imageTag}"
                echo "Registry: ${props.registry}"
                echo "Image Org: ${props.image_org}"
                echo "Team ID: ${props.teamid}"
            }

            stage("Check Changes") {
                script {
                    def changes = sh(
                        script: "git diff --name-only HEAD~1 HEAD",
                        returnStdout: true
                    ).trim()

                    echo "Changed files: ${changes}"

                    if (!changes.contains("smarketing-ai/")) {
                        echo "No changes in smarketing-ai, skipping build"
                        currentBuild.result = 'SUCCESS'
                        error("Stopping pipeline - no changes detected")
                    }

                    echo "Changes detected in smarketing-ai, proceeding with build"
                }
            }

            stage('Build & Push Docker Image') {
                container('podman') {
                    sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'

                    withCredentials([usernamePassword(
                        credentialsId: 'acr-credentials',
                        usernameVariable: 'ACR_USERNAME',
                        passwordVariable: 'ACR_PASSWORD'
                    )]) {
                        sh """
                            echo "=========================================="
                            echo "Building smarketing-ai Python Flask application"
                            echo "Image Tag: ${imageTag}"
                            echo "=========================================="

                            # ACR 로그인
                            echo \$ACR_PASSWORD | podman login ${props.registry} --username \$ACR_USERNAME --password-stdin

                            # Docker 이미지 빌드
                            podman build \\
                                -f smarketing-ai/deployment/Dockerfile \\
                                -t ${props.registry}/${props.image_org}/smarketing-ai:${imageTag} .

                            # 이미지 푸시
                            podman push ${props.registry}/${props.image_org}/smarketing-ai:${imageTag}

                            echo "Successfully built and pushed: ${props.registry}/${props.image_org}/smarketing-ai:${imageTag}"
                        """
                    }
                }
            }

            stage('Update Manifest Repository') {
                container('git') {
                    script {
                        // Manifest Repository Clone
                        withCredentials([usernamePassword(
                            credentialsId: MANIFEST_CREDENTIAL_ID,
                            usernameVariable: 'GIT_USERNAME',
                            passwordVariable: 'GIT_PASSWORD'
                        )]) {
                            sh """
                                echo "=== Git 설정 ==="
                                git config --global user.name "Jenkins CI"
                                git config --global user.email "jenkins@company.com"
                                
                                echo "=== Manifest Repository Clone ==="
                                rm -rf manifest-repo
                                git clone https://\$GIT_USERNAME:\$GIT_PASSWORD@github.com/won-ktds/smarketing-manifest.git manifest-repo
                                cd manifest-repo
                            """
                            
                            def fullImageName = "${props.registry}/${props.image_org}/smarketing-ai:${imageTag}"
                            def deploymentFile = "smarketing-ai/deployments/smarketing-ai/smarketing-ai-deployment.yaml"
                            
                            sh """
                                cd manifest-repo
                                
                                echo "=== smarketing-ai 이미지 태그 업데이트 ==="
                                if [ -f "${deploymentFile}" ]; then
                                    # 이미지 태그 업데이트 (sed 사용)
                                    sed -i 's|image: ${props.registry}/${props.image_org}/smarketing-ai:.*|image: ${fullImageName}|g' "${deploymentFile}"
                                    echo "Updated ${deploymentFile} with new image: ${fullImageName}"
                                    
                                    # 변경사항 확인
                                    echo "=== 변경된 내용 확인 ==="
                                    grep "image: ${props.registry}/${props.image_org}/smarketing-ai" "${deploymentFile}" || echo "이미지 태그 업데이트 확인 실패"
                                else
                                    echo "Warning: ${deploymentFile} not found"
                                fi
                            """
                            
                            sh """
                                cd manifest-repo
                                
                                echo "=== Git 변경사항 확인 ==="
                                git status
                                git diff
                                
                                # 변경사항이 있으면 커밋 및 푸시
                                if [ -n "\$(git status --porcelain)" ]; then
                                    git add .
                                    git commit -m "Update smarketing-ai to ${imageTag} - Build ${env.BUILD_NUMBER}"
                                    git push origin main
                                    echo "✅ Successfully updated manifest repository"
                                else
                                    echo "ℹ️ No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }

            stage('Trigger ArgoCD Sync') {
                script {
                    echo """
🎯 smarketing-ai CI Pipeline 완료!

📦 빌드된 이미지:
- ${props.registry}/${props.image_org}/smarketing-ai:${imageTag}

🔄 ArgoCD 동작:
- ArgoCD가 manifest repository 변경사항을 자동으로 감지합니다
- smarketing-ai Application이 새로운 이미지로 동기화됩니다
- ArgoCD UI에서 배포 상태를 모니터링하세요

🌐 ArgoCD UI: [ArgoCD 접속 URL]
📁 Manifest Repo: ${MANIFEST_REPO}
                    """
                }
            }

            // 성공 시 처리
            echo """
✅ smarketing-ai CI Pipeline 성공!
🏷️ 새로운 이미지 태그: ${imageTag}
🔄 ArgoCD가 자동으로 배포를 시작합니다
            """

        } catch (Exception e) {
            // 실패 시 처리
            echo "❌ smarketing-ai CI Pipeline 실패: ${e.getMessage()}"
            throw e
        } finally {
            // 정리 작업 (항상 실행)
            container('podman') {
                sh 'podman system prune -f || true'
            }
            sh 'rm -rf manifest-repo || true'
        }
    }
}
